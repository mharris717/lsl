module LSL
  grammar Any
    include LSL::CompoundCommand
    rule top_rule
      full_command
    end
    rule pipe_with_ws
      ws pipe ws
    end
    rule non_pipe
      (!pipe_with_ws .)+
    end
    rule some_command
      spaced_ex:("." ex)? non_pipe {
        def command_hash
          e = get_spaced_node(:ex).andand.text_value || LSL::Shell.instance.default_command
          LSL::Command::Single.new(:raw => text_value, :ex => e, 
                               :args => [text_value], :options => {})
        end
      }
    end
  end
end