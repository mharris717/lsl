module LSL
  grammar CompoundCommand
    include LSL::SingleCommand
    include LSL::File
    rule full_command
      some_command (ows "|" ows some_command)* (ows ">" ows filename)? {
        def filename
          find_child_node(:filename)
        end
        def single_commands
          
          res = [some_command.command_hash]
          #res = [elements.first.command_hash]
          rest = find_child_nodes(:some_command).map { |x| x.command_hash }
          #puts "rest #{rest.size}"
          res + rest
        end
        def command_hash
          res = LSL::Command::Compound.new(:commands => single_commands)
          res.output_filename = filename.text_value if filename
          res
        end
      }
    end
    rule eval_str
      "{" (!"}" .)+ "}" {
        def command_hash
          LSL::Command::Single.new(:raw => text_value, :args => [], :options => {})
        end
      }
    end
    rule some_command
      single_command / eval_str
    end
  end
end