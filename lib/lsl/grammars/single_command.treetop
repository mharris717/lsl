module LSL
  grammar SingleCommand
    include LSL::Quoting
    include LSL::List
    rule single_command
      ex spaced_after_ex:(ws after_ex)? {
        def args
          get_spaced_node(:after_ex).andand.args
        end
        def options
          get_spaced_node(:after_ex).andand.options
        end
        def command_hash
          LSL::Command::Single.new(:raw => text_value, :ex => ex.text_value, 
                               :args => args || [], :options => options || {})
        end
      }
    end

    rule after_ex
      ows args_and_ops {
        def args
          args_and_ops.andand.args
        end
        def options
          args_and_ops.andand.options
        end
        def command_hash
          LSL::Command::Single.new(:raw => text_value, :ex => LSL::Shell.instance.default_command, 
                               :args => args || [], :options => options || {})
        end
      }
    end
    
    rule ex
      optionally_quoted_string
    end
    
    rule arg_or_op
      arg / option
    end
    
    rule args_and_ops
      arg_or_op spaced_args_and_ops:(ws args_and_ops)? {
        def args
          res = []
          res << arg_or_op.text_value.unquoted if arg_or_op.at == :arg
          res + (get_spaced_node(:args_and_ops).andand.args || [])
        end
        def options
          res = (arg_or_op.at == :op) ? arg_or_op.kv : {}
          res.merge(get_spaced_node(:args_and_ops).andand.options || {})
        end
      }
    end
    
    rule arg
      optionally_quoted_string {
        def at
          :arg
        end
      }
    end
    
    rule option_flag
      '-' 1..2 word
    end
    rule option
      option_flag spaced_val:("=" val:optionally_quoted_string)? {
        def kv
          {option_flag.word.text_value => get_spaced_node(:val).andand.text_value.andand.unquoted || true}
        end
        def at
          :op
        end
      }
    end
  end
end