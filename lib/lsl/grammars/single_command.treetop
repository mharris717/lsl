module LSL
  grammar SingleCommand
    include LSL::Quoting
    include LSL::List
    rule single_command
      ex (ws args)? (ws options)? {
        def args
          find_child_node(:args)
        end
        def options
          find_child_node(:options)
        end
        def command_hash
          LSL::Command::Single.new(:raw => text_value, :ex => ex.text_value, 
                               :args => args.andand.list_values || [], :options => options.andand.hash_values || {})
        end
      }
    end
    
    rule ex
      word
    end
    
    rule arg
      comma_list
    end
    rule args
      arg (ws arg)*
    end
    
    rule option_flag
      '-' word
    end
    rule option
      option_flag (ws optionally_quoted_string)? {
        def kv
          n = find_child_node2(:optionally_quoted_string)
          {option_flag.word.text_value => n.andand.text_value}
        end
      }
    end
    rule options
      option (ws option)* {
        def hash_values
          res = option.kv
          elements[1..-1].each do |e|
            n = e.find_child_node2(:option)
            res = res.merge(n.kv) if n
          end
          res
        end
      }
    end
  end
end